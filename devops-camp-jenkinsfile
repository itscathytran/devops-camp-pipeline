pipeline {
    agent {
        label 'jenkins-agent'
    }
    
    //TODO("Lab 4 - Artifact Management"): add environment variables
    stages {
        stage('Application repository') {
            steps {
                echo "Cloning application repository"
                //TODO("Lab 3 - Introduction to Automated Builds"): add github url
                sh 'git clone https://www.github.com/itscathytran/afs-labs-student.git'
                //TODO("Lab 4 - Artifact Management"): add COMMIT_HASH variable
                dir('afs-labs-student') {
                    script {
                        env.COMMIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    }
                }
            }
        }
        stage('Application docker build') {
            steps {
                echo "Building application image"
                //TODO("Lab 4 - Artifact Management"): build the docker app image
                stage('Security scanning') {
                    steps {
                        withCredentials([usernamePassword(credentialsId: 'ctran-harbor-auth', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                      echo "Scanning $APP_IMAGE_NAME image"
                      sh 'python harbor_scanner.py -i $APP_IMAGE_NAME -r $HARBOR_REGISTRY -p $HARBOR_PROJECT -c ${USERNAME}:${PASSWORD}'
                        }
                    }
        }
            }
            //TODO("Lab 4 - Artifact Management"): clean local docker app image
            post {
                always {
                    echo "Clean local $DB_IMAGE_NAME image"
                    script {
                        try {
                            sh 'docker rmi $DB_IMAGE_NAME-$COMMIT_HASH:latest'
                            sh 'docker rmi $HARBOR_REGISTRY/$HARBOR_PROJECT/$DB_IMAGE_NAME:$COMMIT_HASH-$PIPELINE_HASH'                            
                        } catch (err) {
                            echo err.getMessage()
                        }
                    }
                }
            }
        }
        stage('Database docker build') {
            steps {
                echo "Building database image"
                //TODO("Lab 4 - Artifact Management"): build the docker db image
            }
            post {
                always {
                    echo "Clean local $DB_IMAGE_NAME image"
                    script {
                        try {
                            sh 'docker rmi $DB_IMAGE_NAME-$COMMIT_HASH:latest'
                            sh 'docker rmi $HARBOR_REGISTRY/$HARBOR_PROJECT/$DB_IMAGE_NAME:$COMMIT_HASH-$PIPELINE_HASH'                            
                        } catch (err) {
                            echo err.getMessage()
                        }
                    }
                }
            }
            
            //TODO("Lab 4 - Artifact Management"): clean local docker db image
        }
        //TODO("Lab 7 - Automated Security Scans"): add a stage
        stage('Deploy') {
            steps {
                echo "Deployment stage"
                //TODO("Lab 5 - Deploy to EKS"): deploy docker images
            }
        }
    }
    post {
        cleanup {
            echo "Clean workspace"
            sh 'rm -rf .git ./*'
        }
    }
}